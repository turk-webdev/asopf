# ----------------------------------------------------------------------------------------------
# Docker Configuration File
# ----------------------------------------------------------------------------------------------
# Instructions
#   - Make a copy of this file with the name ".env" in the same directory
#   - Fill out the missing variable information
#   - Run "docker-compose -f docker-compose.dev.yml config" to verify that changes in this file
#     will show up in the docker-compose.dev.yml at startup
#   - DO NOT DELETE ".env.example" it is used as reference for the rest of the team members

# Name service name of the database in the docker-compose file
MYSQL_HOSTNAME=

# MySQL standard port can be used here since it is on the docker internal network not your localhost network
# To access the database from your local machine edit the docker-compose to "expose" the port you want
MYSQL_PORT=3306

# Name of the database you want to access
MYSQL_DATABASE=

# Username and password for that database
MYSQL_USERNAME=
MYSQL_PASSWORD=

# Root password used during initialization script so that mysql empty root password error doesn't occur
MYSQL_ROOT_PASSWORD=

# Port you will use in mysql workbench to connect to database
# If MySQL is already running on your local machine then you must choose a PORT # other than 3306
HOST_PORT=

# Port we use in the browser to connect to our app. The app always runs at 8080 internally in docker. Use 8080 here if you want it to be the same as what nodemon says. (Note: Don't change the internal nodejs port in the docker-compose.dev.yml since it will break the nginx connection)
APP_PORT=